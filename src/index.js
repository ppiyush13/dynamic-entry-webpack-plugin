const isObject = require('isobject');
const fastDeepEqual = require('fast-deep-equal');

class DynamicEntryPlugin {
    static get name() {
        return 'DynamicEntryPlugin';
    }

    constructor(options) {
        options = options || {};
        this.exportable = options.exportable == null
            ? true
            : options.exportable;
        
        // derive loader path once and use
        this.loaderPath = require.resolve('./dynamicEntryWebpack.loader.js');

        // this will hold the last entry generated by this plugin
        this.currentEntry;
    }

    createNewLoaderPath(entry) {
        /**
         * if coming second time here, entry is the loader path generated in first phase
        */

        // replace instaces of loader within entry, if any
        const normalizedEntry = this.normalizeEntry(entry);

        // stringify entry
        const entryString = encodeURIComponent(JSON.stringify(normalizedEntry));

        // create loader path
        return `${this.loaderPath}?id=dynamic-entry&exportable=${this.exportable}&entry=${entryString}!`;
    }

    apply(compiler) {
        compiler.hooks.entryOption.tap(
            DynamicEntryPlugin.name,
            (context, entry) => {
                if (fastDeepEqual(entry, this.currentEntry)) {

                }
                else {
                    const newLoaderPath = isObject(entry)
                        ? Object.keys(entry).reduce((acc, key) => {
                            acc[key] = this.createNewLoaderPath(entry[key]);
                            return acc;
                        }, {})
                        : this.createNewLoaderPath(entry);

                    compiler.options.entry = this.currentEntry = newLoaderPath;
                    compiler.hooks.entryOption.call(context, newLoaderPath);

                    // this is mandatory return
                    return true;
                }
            }
        );
    }

    /**
     * 
     * @param {String|Array} loader 
     * 
     */
    normalizeEntry(loader) {
        const getEntryByLoaderPath = (loader) => {
            return this.getEntryFromLoader(loader);
        };

        if (Array.isArray(loader))
            return loader.reduce((acc, key) => {
                return acc.concat(getEntryByLoaderPath(key));
            }, []);
        else
            return getEntryByLoaderPath(loader);
    }

    /**
     * 
     * @param {String} entryPath 
     * 
     * Should operate only over String input param
     */
    getEntryFromLoader(entryPath = '') {
        const loaderRegex = /\?.*entry=(.*)!&?/;
        const matchResult = entryPath.match(loaderRegex);

        return matchResult
            ? JSON.parse(decodeURIComponent(matchResult[1]))
            : entryPath;
    }
}

module.exports = DynamicEntryPlugin;
